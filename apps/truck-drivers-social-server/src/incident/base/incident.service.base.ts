/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Incident as PrismaIncident,
  User as PrismaUser,
} from "@prisma/client";

export class IncidentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.IncidentCountArgs, "select">): Promise<number> {
    return this.prisma.incident.count(args);
  }

  async incidents(
    args: Prisma.IncidentFindManyArgs
  ): Promise<PrismaIncident[]> {
    return this.prisma.incident.findMany(args);
  }
  async incident(
    args: Prisma.IncidentFindUniqueArgs
  ): Promise<PrismaIncident | null> {
    return this.prisma.incident.findUnique(args);
  }
  async createIncident(
    args: Prisma.IncidentCreateArgs
  ): Promise<PrismaIncident> {
    return this.prisma.incident.create(args);
  }
  async updateIncident(
    args: Prisma.IncidentUpdateArgs
  ): Promise<PrismaIncident> {
    return this.prisma.incident.update(args);
  }
  async deleteIncident(
    args: Prisma.IncidentDeleteArgs
  ): Promise<PrismaIncident> {
    return this.prisma.incident.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.incident
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
