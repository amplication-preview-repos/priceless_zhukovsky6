/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Incident } from "./Incident";
import { IncidentCountArgs } from "./IncidentCountArgs";
import { IncidentFindManyArgs } from "./IncidentFindManyArgs";
import { IncidentFindUniqueArgs } from "./IncidentFindUniqueArgs";
import { CreateIncidentArgs } from "./CreateIncidentArgs";
import { UpdateIncidentArgs } from "./UpdateIncidentArgs";
import { DeleteIncidentArgs } from "./DeleteIncidentArgs";
import { User } from "../../user/base/User";
import { IncidentService } from "../incident.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Incident)
export class IncidentResolverBase {
  constructor(
    protected readonly service: IncidentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Incident",
    action: "read",
    possession: "any",
  })
  async _incidentsMeta(
    @graphql.Args() args: IncidentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Incident])
  @nestAccessControl.UseRoles({
    resource: "Incident",
    action: "read",
    possession: "any",
  })
  async incidents(
    @graphql.Args() args: IncidentFindManyArgs
  ): Promise<Incident[]> {
    return this.service.incidents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Incident, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Incident",
    action: "read",
    possession: "own",
  })
  async incident(
    @graphql.Args() args: IncidentFindUniqueArgs
  ): Promise<Incident | null> {
    const result = await this.service.incident(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Incident)
  @nestAccessControl.UseRoles({
    resource: "Incident",
    action: "create",
    possession: "any",
  })
  async createIncident(
    @graphql.Args() args: CreateIncidentArgs
  ): Promise<Incident> {
    return await this.service.createIncident({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Incident)
  @nestAccessControl.UseRoles({
    resource: "Incident",
    action: "update",
    possession: "any",
  })
  async updateIncident(
    @graphql.Args() args: UpdateIncidentArgs
  ): Promise<Incident | null> {
    try {
      return await this.service.updateIncident({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Incident)
  @nestAccessControl.UseRoles({
    resource: "Incident",
    action: "delete",
    possession: "any",
  })
  async deleteIncident(
    @graphql.Args() args: DeleteIncidentArgs
  ): Promise<Incident | null> {
    try {
      return await this.service.deleteIncident(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Incident): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
